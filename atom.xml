<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZX&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://HolyCat123.github.io/"/>
  <updated>2019-06-16T13:09:49.303Z</updated>
  <id>http://HolyCat123.github.io/</id>
  
  <author>
    <name>zx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES诗词分析</title>
    <link href="http://HolyCat123.github.io/2019/06/16/ES%E8%AF%97%E8%AF%8D%E5%88%86%E6%9E%90/"/>
    <id>http://HolyCat123.github.io/2019/06/16/ES诗词分析/</id>
    <published>2019-06-16T12:55:52.000Z</published>
    <updated>2019-06-16T13:09:49.303Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;诗词的兴盛，就算按照诗谱序所言，不于上皇之世，到现在也有个几千年了。然而诗经不过三百余首，煊赫的唐诗，也才四五万首左右。到了当代，写诗的人数相较于唐宋之时，可以说是远迈了。然而当代旧体诗词数量众多，质量参差不齐。于是，身为一名菜鸟数据工程师，爬取了52诗词网上的两万首诗词作为源数据，略分析一下52诗词网上的公开诗词。</p><p>&emsp;&emsp;首先，我必须指出的是，因为吾爱诗词网的内容实在是太乱了，也不好找出一个统一的过滤数据的方式，因而部分数据并不十分严谨，同时可能还存在相同数据的情况（忘了除重了），万忘见宥。</p><p>&emsp;&emsp;当爬完数据的时候，不得不说，当代人实在是非常能写。2w首是什么概念呢？它大约是全唐诗的百分之四十，全宋诗的百分之八。但它在当代，实在不足一提，犹如沧海一粟，它只是从半年里吾爱诗词网的闲咏杂谈栏目的数据量。这仅仅是吾爱诗词网的数据而已，不包括其它诗词类网站，更何况，我认识的人中，使用吾爱的人寥寥无几。如此看来，当代的诗歌数量印成书，那便是厚厚的一堆了。</p><p>&emsp;&emsp;与数量多相反的是，粗略浏览之下，诗词的质量并不高，甚至可以说很低。因为吾爱诗词网的受众主要是中老年人，这一定程度上也可以说是审美的差异（其中不乏一些注释写得贼偏得，不知道是不是自动注释功能得作用）。从内容来看，其主要体现的是我写我，口语化现象十分严重，也没有什么诗歌技巧。如果将它们与唐宋相比，自然是远远不及，但个人认为，从新文化运动之后，旧体诗词就很难再有复兴，写得好与写得差，都是自娱居多。清华大学得人工智能小组有一个九歌项目，我觉得大概吾爱诗词网得普遍水平可能还不如作诗机。刘慈欣有一篇科幻小说《诗云》，里面更高维度的文明能够穷尽所有诗的可能，而人类不过是海边的拾贝人，期待哪一天能够捡到一块漂亮的，从而暴得大名。被海冲到浪边的贝壳毕竟是少数，唐人宋人捡了很多走了，到今人恐怕就捡不到什么了（莫名想到了比特币）。</p><p>&emsp;&emsp;同时，对数据源进行聚合之后发现，仅半年之内，就有四名作者发表的诗歌数量超过180，勤加努力，尚有机会超越十全老人（记得去年看到某位官员的诗集，数量高达两万余首，都是强者）。然后，可能大家平时自己写诗都没有什么感觉，到底自己写诗的时候，用什么字最多，这次专门对诗歌内容进行了分词聚合，只对单词和双词进行了匹配，发现，二者最火的词分别如下。</p><p><img src="/2019/06/16/ES诗词分析/QQ20190616-0.png" alt="单词柱状图"></p><center>单词柱状图</center><br><img src="/2019/06/16/ES诗词分析/QQ20190616-1.png" alt="双词柱状图"><br><center>双词柱状图</center><p>&emsp;&emsp;当然，以上的表是有一些问题的，尤其是一的数量。19856首诗中，含有一字的大约是7386首。其中有相当一部分的数据是因为源数据中自己填写了韵表之类的一些信息，导致一的数量虚高。但是，就算去除这部分数据，一仍然是当之无愧的第一，因为它的优势太大了。其它的基本是诗句内容中含有该字的数量，其它类似于七，绝，新韵，十一，有感一类的词均被剔除了排名资格。所以说呢，这部分数据当是可信的。可见，春风，人生这种词，真得是烂大街级别，类似于什么袖手？？？凭栏？？？还有相思这个词，某位博主的文中，它是排在第一的，我随便爬的数据中，相思出现的次数也在前五。<del style="color: #F66;">果然甜甜的爱情是每个人，每个年龄段都期待的，呜呜呜，我酸了，你们呢，啥时候甜甜的爱情才能降临到我的头上鸭。</del></p><p>&emsp;&emsp;由于时间比较紧，也还没有想好从哪些维度进行分析，所以授人以鱼不如授人以渔，还是把源码贴一下，感兴趣的朋友可以自行尝试。吾爱诗词网还是挺好爬的，没有针对爬虫做任何限制，各位可以尝试一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider52</span> <span class="keyword">extends</span> <span class="title">BaseSpider</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>(&#123;<span class="attr">baseUrl</span>: <span class="string">'http://www.52shici.com/'</span>, <span class="attr">name</span>: <span class="string">'52诗词爬虫'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> getPoemUrlList(url) &#123;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">400</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> targetUrl = <span class="keyword">this</span>.baseUrl + url + <span class="string">'?type=20&amp;page='</span> + i;</span><br><span class="line">            <span class="keyword">let</span> res = <span class="keyword">await</span> axios.get(targetUrl);</span><br><span class="line">            <span class="keyword">let</span> $ = cheerio.load(res);</span><br><span class="line">            $(<span class="string">'ul#listWorks li a'</span>).each( <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> poemObj = <span class="keyword">await</span> _this.getPoemFromPage($(<span class="keyword">this</span>).attr(<span class="string">'href'</span>));</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Poem.create(poemObj).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'成功！'</span>, <span class="built_in">JSON</span>.stringify(poemObj))</span><br><span class="line">                    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'失败~'</span>, err)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'发生了一个错误-------------------'</span>, e)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> getPoemFromPage(url) &#123;</span><br><span class="line">        <span class="keyword">let</span> targetUrl = <span class="keyword">this</span>.baseUrl + url;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> axios.get(targetUrl);</span><br><span class="line">        <span class="keyword">let</span> $ = cheerio.load(res);</span><br><span class="line">        <span class="keyword">let</span> content = $(<span class="string">'div#worksContent'</span>).text();</span><br><span class="line">        <span class="keyword">let</span> title = $(<span class="string">'div.works-h1 em'</span>).text().trim();</span><br><span class="line">        <span class="keyword">let</span> authorSelectText = $(<span class="string">'span.author'</span>).text().trim();</span><br><span class="line">        <span class="keyword">let</span> authorArr = authorSelectText.split(<span class="regexp">/\s+/</span>);</span><br><span class="line">        <span class="keyword">let</span> subType = authorArr[<span class="number">0</span>] &amp;&amp; authorArr[<span class="number">0</span>].slice(<span class="number">1</span>, authorArr[<span class="number">0</span>].length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">let</span> authorName = authorArr[<span class="number">1</span>] &amp;&amp; authorArr[<span class="number">1</span>].slice(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">let</span> createTime = $(<span class="string">'em.time'</span>).text().trim();</span><br><span class="line">        <span class="keyword">let</span> ofPortfolio = $(<span class="string">'a.collection_link'</span>).text().trim();</span><br><span class="line">        <span class="keyword">let</span> desc = $(<span class="string">'p.works-intro'</span>).text().trim();</span><br><span class="line">        <span class="keyword">let</span> poetryType = getPoemType(subType);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            pullTime: moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>),</span><br><span class="line">            content,</span><br><span class="line">            title,</span><br><span class="line">            subType,</span><br><span class="line">            authorName,</span><br><span class="line">            createTime,</span><br><span class="line">            ofPortfolio,</span><br><span class="line">            appreciation: <span class="string">''</span>,</span><br><span class="line">            desc,</span><br><span class="line">            poetryType</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> analysis() &#123;</span><br><span class="line">        <span class="keyword">await</span> Poem.sync(&#123;<span class="attr">force</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">this</span>.getPoemUrlList(<span class="string">'original.php?type=20'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;主要使用了axios（http请求），cheerio（DOM操作），sequelize（ORM框架）三个库，大家可以自行尝试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;诗词的兴盛，就算按照诗谱序所言，不于上皇之世，到现在也有个几千年了。然而诗经不过三百余首，煊赫的唐诗，也才四五万首左右。到了当代，写诗的人数相较于唐宋之时，可以说是远迈了。然而当代旧体诗词数量众多，质量参差不齐。于是，身为一名菜鸟数据工程师，爬取了5
      
    
    </summary>
    
      <category term="-数据分析" scheme="http://HolyCat123.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="-JS -ElasticSearch" scheme="http://HolyCat123.github.io/tags/JS-ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>JS进阶使用</title>
    <link href="http://HolyCat123.github.io/2019/06/08/JS%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://HolyCat123.github.io/2019/06/08/JS进阶使用/</id>
    <published>2019-06-08T13:51:20.000Z</published>
    <updated>2019-06-08T15:43:15.245Z</updated>
    
    <content type="html"><![CDATA[<p>​&emsp;&emsp;这个博客想写很久了，一直拖着拖着，感觉再拖下去，自己一直打自己的脸也不太好。本来想讲一些接触到的JS的用法的，又觉得都只是API的调用，蛮简单的，所以讲了ES6和ES7语法中的一些东西。怎么说呢，原本以为自己写博客，一定能写很长的，毕竟自己当年也热爱文字，笔耕不缀，真正自己写的时候，要么感觉蛮简单，自己在说废话，要么就是不知道自己怎样下笔，也只堪堪凑了一千来字的文章，主要讲了Promise和async，await。说实话，如果我身为一名萌新，读这篇博客，可能获取不到什么收益，只希望自己能够坚持下去。假如有喜欢JS，Python以及Java的朋友，也可以一起交流~</p><h2 id="一，什么是Promise？"><a href="#一，什么是Promise？" class="headerlink" title="一，什么是Promise？"></a>一，什么是Promise？</h2><p>​&emsp;&emsp;Promise是JS的ES6标准添加的一个新特性，众所周知，JS是一门单线程语言，写过JQ代码的都知道，某些极端情况下，会产生很多级的回调，这样就产生了回调地狱，代码维护起来十分困难（考虑某个项目需要四个请求全部完成才能算是请求正确，这样就会不得不嵌套四层回调）。因此，Promise应运而生。它是异步编程的一个解决方案，实质上Promise是一个对象，它拥有三种状态：<strong>pending(等待态)，fulfiled(成功态)，rejected(失败态)</strong>，并且状态一旦改变，就不会再变。话不多说，直接上代码体会。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    reject(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​&emsp;&emsp;让我们好好想想上面的代码会显示什么？</p><p>​&emsp;&emsp;可能会有一部分人觉得上面的代码会打印出1，然而，实际上，上面的代码会打印出2。我们都清楚JS的事件队列机制，它会先执行同步任务，再执行异步任务。因此，在Promise的构造函数中，尽管setTimeout设置了很低的时延，但其依然是一个异步任务，同步任务的reject(2)已经抢先将Promise的状态从等待态变为了失败态，<strong>Promise的状态一旦改变，就不会再变</strong>，所以只会打印出2。</p><p>​&emsp;&emsp;同样值得注意的是，当Promise内部的代码执行时出现了错误，也并不会抛出错误。它也会将Promise的状态设置为rejected，并将错误传递给接下来的catch的处理逻辑。Promise是一种基于状态的管理，通过状态，就可以将一些复杂的回调函数，写成then的链式调用。</p><p>​&emsp;&emsp;Promise还有两个比较重要的使用方法，一个是Promise.all()， 一个是Promise.race()。这两个分别代表，当全部为成功时才算成功和当一个为成功时则算成功，示例代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'5s 的延时'</span>)</span><br><span class="line">        resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">5000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> test2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'2s 的延时'</span>)</span><br><span class="line">        resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([test1, test2]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'all成功执行！'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​&emsp;&emsp;上面的代码返回值应当是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2s</span> 的延时</span><br><span class="line"><span class="number">5s</span> 的延时</span><br><span class="line">all成功执行！</span><br></pre></td></tr></table></figure><p>​&emsp;&emsp;如果将Promise.all改为Promise.race，则将是下面这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2s</span> 的延时</span><br><span class="line"><span class="number">5s</span> 的延时</span><br><span class="line">all成功执行！</span><br></pre></td></tr></table></figure><p>​&emsp;&emsp;Promise理解了之后还是挺简单的，挺好用的。不过虽然Promise相较于之前的回调函数，代码的可看性有了很大的改观，但是还是不够爽。而且假设有一个极端的情况，四个请求ABCD，要求必须按顺序，得到返回值之后才能执行下一个，如果使用Promise还是不咋美观，这个时候就需要ES7的async和await的出场了。</p><h2 id="二，async和await"><a href="#二，async和await" class="headerlink" title="二，async和await"></a>二，async和await</h2><p>​&emsp;&emsp;async顾名思义，即声明一个函数是异步函数，而await则是在异步函数中等待一个异步任务完成，直到执行完成后，再继续执行下面的代码。await关键字只能够在async函数中使用，而不能直接使用。async和await可以让我们用编写同步任务代码的方式来编写异步任务代码，可以说，学会这一大法，编写JS代码的幸福感瞬间提升无数倍（才怪）。</p><p>​&emsp;&emsp;首先让我们来看一个小栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sleep = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`延迟了<span class="subst">$&#123;time&#125;</span>s`</span>)</span><br><span class="line">            resolve(time)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> sleep(<span class="number">1000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步任务还是最先执行到的。'</span>)</span><br></pre></td></tr></table></figure><p>​&emsp;&emsp;上面一段代码最终执行效果如下：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">同步任务还是最先执行到的。</span><br><span class="line">延迟了<span class="number">1000</span>s</span><br><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure><p>​&emsp;&emsp;上面的显示结果告诉我们，不管怎么说，JS代码执行的时候，同步代码都是一等公民，怎么着都得先执行（DOM的操作也是同步任务，但是DOM渲染不是）。但是当执行一个声明了的异步函数的时候，await会在异步函数执行完成后，继续执行下面的代码。</p><p>​&emsp;&emsp;如果我们打印上面的test函数，我们会发现，实质上async关键字返回的是一个Promise对象。所以，如果async函数需要取到它的返回值的话，需要像操作Promise对象一样，在then中取到，不能直接取到。</p><p>​&emsp;&emsp;想说得挺多的，然而写得时候，却不知道写什么，如果有什么问题，欢迎一起交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​&amp;emsp;&amp;emsp;这个博客想写很久了，一直拖着拖着，感觉再拖下去，自己一直打自己的脸也不太好。本来想讲一些接触到的JS的用法的，又觉得都只是API的调用，蛮简单的，所以讲了ES6和ES7语法中的一些东西。怎么说呢，原本以为自己写博客，一定能写很长的，毕竟自己当年也热
      
    
    </summary>
    
    
      <category term="-JS" scheme="http://HolyCat123.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>spring security注册后登录</title>
    <link href="http://HolyCat123.github.io/2019/03/01/spring-security%E6%B3%A8%E5%86%8C%E5%90%8E%E7%99%BB%E5%BD%95/"/>
    <id>http://HolyCat123.github.io/2019/03/01/spring-security注册后登录/</id>
    <published>2019-03-01T15:21:18.000Z</published>
    <updated>2019-03-03T13:08:28.414Z</updated>
    
    <content type="html"><![CDATA[<p>​    之前曾经写过一个Demo，其中有个需求是完成注册后自动登录。实际应用场景中，我们自然不可能让用户注册后，再使用注册后的账户和密码重新登录一次，个人觉得这是一个不怎么人性化的操作。当我们使用Spring security框架进行开发的时候，虽然默认提供了有记住登录的功能，但是却没有提供注册后登录的配置，我就查询了百度的相关资料。然而，这个时候，如果你和我一样有同样的需求，你就会发现，百度上的代码都是用不了的。不知道是由于年代久远，还是各种博客互相抄袭，解决的方案基本一致，然而代码全都不能用。</p><p>​    如果对Spring security框架有一定的了解，就知道Spring security是把登录的用户存储到session中，如果session中存储了有Authentication则证明该用户已登录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    之前曾经写过一个Demo，其中有个需求是完成注册后自动登录。实际应用场景中，我们自然不可能让用户注册后，再使用注册后的账户和密码重新登录一次，个人觉得这是一个不怎么人性化的操作。当我们使用Spring security框架进行开发的时候，虽然默认提供了有记住登录的
      
    
    </summary>
    
    
      <category term="Java" scheme="http://HolyCat123.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://HolyCat123.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记(一)</title>
    <link href="http://HolyCat123.github.io/2019/03/01/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://HolyCat123.github.io/2019/03/01/python学习笔记一/</id>
    <published>2019-03-01T14:59:22.000Z</published>
    <updated>2019-03-01T18:33:03.374Z</updated>
    
    <content type="html"><![CDATA[<p><code>python</code>，俗称蟒蛇。是由Guido van Rossum圣诞节无聊，打发时间鼓捣出的一种脚本语言（Linus休息的时候写出来git，成就了现在如日中天的GitHub，可见大佬们都是无敌的）。历经多年的发展，借着人工智能的浪潮，已经成为了世界上最火爆的语言之一。python的优点在于它的语法十分简洁，据说，实现同样的功能，python的代码量只是<code>JAVA</code>的五分之一。不过，python的执行效率也一直饱受诟病，这也是python一直不够火的原因。当然，这一切都随着计算机性能的大幅度提升成为了过去式。现在而言，对于很多公司来说，重要的是快速迭代，因而，python成为了首选。例如著名的网站——豆瓣，就是采用python制作的。</p><hr><h2 id="python的安装及环境配置"><a href="#python的安装及环境配置" class="headerlink" title="python的安装及环境配置"></a>python的安装及环境配置</h2><h3 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h3><p>打开<a href="https://www.python.org" target="_blank" rel="noopener">python官网</a>，选择Downloads，会出现如下界面</p><p><img src="/2019/03/01/python学习笔记一/python01-01.png" alt="下载页面"></p><p>选择Python3.7.2进行下载安装即可。</p><p>下载之后，双击安装，与安装其它软件并无差别。唯一的不同是，双击安装，进入安装页面后，请务必记得勾选Add To Path，这样才能在CMD中打开python。</p><h3 id="linux安装"><a href="#linux安装" class="headerlink" title="linux安装"></a>linux安装</h3><h3 id="macos安装"><a href="#macos安装" class="headerlink" title="macos安装"></a>macos安装</h3><hr><h2 id="python基本语法"><a href="#python基本语法" class="headerlink" title="python基本语法"></a>python基本语法</h2><p>安装完毕python之后，则可以在命令行中输入python后回车（也可以打开IDLE）进行交互式操作（windows系统按住shift，然后点击鼠标右键，会有一个在此处打开命令行窗口或者powershell，点击即可进入命令行）。</p><p>进入python后的显示界面如下：</p><p><img src="/2019/03/01/python学习笔记一/python01-02.png" alt="cmd"></p><p>如此显示，则代表成功启动python。</p><h4 id="python的数据类型"><a href="#python的数据类型" class="headerlink" title="python的数据类型"></a>python的数据类型</h4><p>python是一门弱数据类型语言，即它定义一个变量的时候，并不需要声明该变量的数据类型。在python中有六种基本的数据类型，分别是Number(数字),String(字符串),Tuple(元组),List(列表),Dictionary(字典),Set(集合)。其中前三种属于不可变数据，后三种属于可变数据。下面讲解六种基本数据类型。</p><h5 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h5><h6 id="int类型"><a href="#int类型" class="headerlink" title="int类型"></a>int类型</h6><p>int类型即整型，是数字5，10，这样没有小数点的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br></pre></td></tr></table></figure><h6 id="float类型"><a href="#float类型" class="headerlink" title="float类型"></a>float类型</h6><p>float类型即浮点型，是5.0，4.5这样有小数点的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">4.3</span></span><br><span class="line">&gt;&gt;&gt;type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">float</span>'&gt;</span></span><br></pre></td></tr></table></figure><h6 id="complex类型"><a href="#complex类型" class="headerlink" title="complex类型"></a>complex类型</h6><p>complex类型复数类型，是类似于4+5j这样的数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">5</span>+<span class="number">4j</span></span><br><span class="line">&gt;&gt;&gt;type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">complex</span>'&gt;</span></span><br></pre></td></tr></table></figure><h6 id="bool类型"><a href="#bool类型" class="headerlink" title="bool类型"></a>bool类型</h6><p>bool类型是布尔类型，该类型只有False和True两个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bool</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>布尔类型虽然表示逻辑，但是可以直接与数字进行计算。True 的值为1，False的值为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a, b= <span class="keyword">True</span>, <span class="number">1</span>      <span class="comment">#对a，b两个变量分别赋值，a为True，b为1</span></span><br><span class="line">&gt;&gt;&gt;a + b</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h5><p>string类型即字符串类型，python中的字符串被单引号’’或者双引号“”括起来，同时使用\转义特殊字符。两个字符串可以直接拼接，这样就产生了一个新的字符串。同时在python中，string类型可以方便的剪切，可以使用形如</p><p><code>变量[头下标:尾下标]</code>的代码进行字符串剪接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;w = <span class="string">'赵襄'</span><span class="comment">#双引号与单引号并无区别</span></span><br><span class="line">&gt;&gt;&gt;w <span class="comment">#也可以使用print(w)打印，直接s仅限于交互窗口</span></span><br><span class="line"><span class="string">'赵襄'</span></span><br><span class="line">&gt;&gt;&gt;z  = <span class="string">'襄襄'</span></span><br><span class="line">&gt;&gt;&gt;wz = w + z</span><br><span class="line">&gt;&gt;&gt;print(wz)</span><br><span class="line"><span class="string">'赵襄襄襄'</span></span><br><span class="line">&gt;&gt;&gt;wz[<span class="number">0</span>:<span class="number">1</span>]<span class="comment">#所有的编程语言中，第一个字符都是由0开始算的。</span></span><br><span class="line"><span class="string">'襄'</span></span><br><span class="line">&gt;&gt;&gt;wz[<span class="number">0</span>:<span class="number">-1</span>]<span class="comment">#-1表示从尾部数起</span></span><br><span class="line"><span class="string">'赵襄襄'</span></span><br><span class="line">&gt;&gt;&gt;wz[<span class="number">0</span>]<span class="comment">#如同wz[0:1]，如果没有尾下标，则将处于头下标的字符输出。</span></span><br><span class="line"><span class="string">'襄'</span></span><br><span class="line">&gt;&gt;&gt;wz*<span class="number">2</span><span class="comment">#python中字符串可以使用乘法，表示将该字符串复制n遍</span></span><br><span class="line"><span class="string">'赵襄襄襄赵襄襄襄'</span></span><br><span class="line">&gt;&gt;&gt;wz[<span class="number">1</span>:<span class="number">3</span>]*<span class="number">2</span><span class="comment">#也可以混合一起用，python是一门胶水语言</span></span><br><span class="line"><span class="string">'襄襄襄襄'</span></span><br><span class="line">&gt;&gt;&gt;print(wz+<span class="string">'\n123'</span>)<span class="comment">#\后跟字符会将字符转义，\n即是回车，必须加print，不然默认交互界面是不转义的</span></span><br><span class="line">赵襄襄襄</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h5 id="tuple类型"><a href="#tuple类型" class="headerlink" title="tuple类型"></a>tuple类型</h5><p>tuple类型即元组类型，tuple类型和list类型十分相似，唯一的区别是list里面的元素可以改变，而元组不能。同时元组，列表索引的方式，与string是一模一样的。元组的定义是用小括号()包围。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;tuple = ( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>  )</span><br><span class="line">&gt;&gt;&gt;tinytuple = (<span class="number">123</span>, <span class="string">'阿襄'</span>)</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tuple)             <span class="comment"># 输出完整元组</span></span><br><span class="line">(<span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tuple[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line">abcd</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tuple[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line">(<span class="number">786</span>, <span class="number">2.23</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tuple[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line">(<span class="number">2.23</span>, <span class="string">'阿襄'</span>， <span class="number">70.2</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line">(<span class="number">123</span>, <span class="string">'阿襄'</span>, <span class="number">123</span>, <span class="string">'阿襄'</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tuple + tinytuple) <span class="comment"># 连接元组</span></span><br><span class="line">( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span> , <span class="number">123</span>, <span class="string">'阿襄'</span>)</span><br><span class="line">&gt;&gt;&gt;tinytuple[<span class="number">1</span>] = <span class="string">'襄襄'</span><span class="comment">#修改元组的元素会报错，就算修改后和修改前一样也是如此</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><h5 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h5><p>list类型即列表类型，与tuple十分相似，不多赘述。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;list = [ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span> ]</span><br><span class="line">&gt;&gt;&gt;tinylist = [<span class="number">123</span>, <span class="string">'阿襄'</span>]</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (list)            <span class="comment"># 输出完整列表</span></span><br><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (list[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line">abcd</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (list[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line">[<span class="number">786</span> , <span class="number">2.23</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (list[<span class="number">2</span>:])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line">[<span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 输出两次列表</span></span><br><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>, <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (list + tinylist) <span class="comment"># 连接列表</span></span><br><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">'阿襄'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;list[<span class="number">3</span>] = <span class="string">'襄襄'</span>  <span class="comment">#与tuple不同，list的元素值可以被改变</span></span><br><span class="line">&gt;&gt;&gt;print(list)</span><br><span class="line">[ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'襄襄'</span>, <span class="number">70.2</span> ]</span><br><span class="line">&gt;&gt;&gt;list[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">777</span>, <span class="number">223</span>, <span class="string">'赵襄'</span>]<span class="comment">#同时也可以使用索引批量更改</span></span><br><span class="line">[ <span class="string">'abcd'</span>, <span class="number">777</span>, <span class="number">223</span>, <span class="string">'赵襄'</span>, <span class="number">70.2</span> ]</span><br></pre></td></tr></table></figure><h5 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h5><p>set类型是集合类型，基本操作与tuple和list一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;student = &#123;<span class="string">'赵襄'</span>, <span class="string">'阿襄'</span>, <span class="string">'襄襄'</span>, <span class="string">'赵襄'</span>&#125; </span><br><span class="line">&gt;&gt;&gt;print(student)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line">&#123;<span class="string">'赵襄'</span>, <span class="string">'阿襄'</span>, <span class="string">'襄襄'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">&gt;&gt;&gt;a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">&gt;&gt;&gt;b = set(<span class="string">'alacazam'</span>)</span><br><span class="line">&gt;&gt;&gt;print(a)<span class="comment">#顺序可能不一样</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;print(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;print(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line">&#123;<span class="string">'l'</span>, <span class="string">'r'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'z'</span>, <span class="string">'m'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;print(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;print(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br><span class="line">&#123;<span class="string">'l'</span>, <span class="string">'r'</span>, <span class="string">'z'</span>, <span class="string">'m'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>&#125;</span><br></pre></td></tr></table></figure><font color="#FF0000">Tips:特别注意，如果创建一个空集合，不能使用<code>a={}</code>，而应当使用<code>a=set()</code>，前者默认是创建一个空的字典，而非一个空的集合。</font><h5 id="dictionary类型"><a href="#dictionary类型" class="headerlink" title="dictionary类型"></a>dictionary类型</h5><p>dictionary是字典类型，类似于平常的字典。主要存储的是键值对（key-value），主要通过key来获取value。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[<span class="string">'wz'</span>] = <span class="string">"赵襄"</span></span><br><span class="line">dict[<span class="number">2</span>]    = <span class="string">"阿襄"</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'赵襄'</span>,<span class="string">'age'</span>:<span class="number">16</span>, <span class="string">'like'</span>: <span class="string">'道'</span>&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (dict[<span class="string">'wz'</span>])       <span class="comment"># 输出键为 'wz' 的值</span></span><br><span class="line">赵襄</span><br><span class="line"><span class="keyword">print</span> (dict[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line">阿襄</span><br><span class="line"><span class="keyword">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'赵襄'</span>,<span class="string">'age'</span>: <span class="number">21</span>, <span class="string">'like'</span>: <span class="string">'诗'</span>&#125;</span><br><span class="line"><span class="keyword">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'like'</span>])</span><br><span class="line"><span class="keyword">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br><span class="line">dict_values([<span class="string">'赵襄'</span>, <span class="number">21</span>, <span class="string">'诗'</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;python&lt;/code&gt;，俗称蟒蛇。是由Guido van Rossum圣诞节无聊，打发时间鼓捣出的一种脚本语言（Linus休息的时候写出来git，成就了现在如日中天的GitHub，可见大佬们都是无敌的）。历经多年的发展，借着人工智能的浪潮，已经成为了世界上最
      
    
    </summary>
    
    
      <category term="Python" scheme="http://HolyCat123.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>poem</title>
    <link href="http://HolyCat123.github.io/2018/12/20/poem/"/>
    <id>http://HolyCat123.github.io/2018/12/20/poem/</id>
    <published>2018-12-20T10:44:05.000Z</published>
    <updated>2019-03-01T16:01:13.242Z</updated>
    
    <content type="html"><![CDATA[<p>打算创建一个关于诗歌的网站。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打算创建一个关于诗歌的网站。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="其它" scheme="http://HolyCat123.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
</feed>
