<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HolyCat123&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://HolyCat123.github.io/"/>
  <updated>2019-03-01T16:01:03.827Z</updated>
  <id>http://HolyCat123.github.io/</id>
  
  <author>
    <name>zx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring security注册后登录</title>
    <link href="http://HolyCat123.github.io/2019/03/01/spring-security%E6%B3%A8%E5%86%8C%E5%90%8E%E7%99%BB%E5%BD%95/"/>
    <id>http://HolyCat123.github.io/2019/03/01/spring-security注册后登录/</id>
    <published>2019-03-01T15:21:18.000Z</published>
    <updated>2019-03-01T16:01:03.827Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://HolyCat123.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://HolyCat123.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记(一)</title>
    <link href="http://HolyCat123.github.io/2019/03/01/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://HolyCat123.github.io/2019/03/01/python学习笔记一/</id>
    <published>2019-03-01T14:59:22.000Z</published>
    <updated>2019-03-01T16:01:10.076Z</updated>
    
    <content type="html"><![CDATA[<p><code>python</code>，俗称蟒蛇。是由Guido van Rossum圣诞节无聊，打发时间鼓捣出的一种脚本语言（Linus休息的时候写出来git，成就了现在如日中天的GitHub，可见大佬们都是无敌的）。历经多年的发展，借着人工智能的浪潮，已经成为了世界上最火爆的语言之一。python的优点在于它的语法十分简洁，据说，实现同样的功能，python的代码量只是<code>JAVA</code>的五分之一。不过，python的执行效率也一直饱受诟病，这也是python一直不够火的原因。当然，这一切都随着计算机性能的大幅度提升成为了过去式。现在而言，对于很多公司来说，重要的是快速迭代，因而，python成为了首选。例如著名的网站——豆瓣，就是采用python制作的。</p><hr><h2 id="python的安装及环境配置"><a href="#python的安装及环境配置" class="headerlink" title="python的安装及环境配置"></a>python的安装及环境配置</h2><h3 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h3><p>打开<a href="https://www.python.org" target="_blank" rel="noopener">python官网</a>，选择Downloads，会出现如下界面</p><p><img src="/2019/03/01/python学习笔记一/python01-01.png" alt="下载页面"></p><p>选择Python3.7.2进行下载安装即可。</p><p>下载之后，双击安装，与安装其它软件并无差别。唯一的不同是，双击安装，进入安装页面后，请务必记得勾选Add To Path，这样才能在CMD中打开python。</p><h3 id="linux安装"><a href="#linux安装" class="headerlink" title="linux安装"></a>linux安装</h3><h3 id="macos安装"><a href="#macos安装" class="headerlink" title="macos安装"></a>macos安装</h3><hr><h2 id="python基本语法"><a href="#python基本语法" class="headerlink" title="python基本语法"></a>python基本语法</h2><p>安装完毕python之后，则可以在命令行中输入python后回车（也可以打开IDLE）进行交互式操作（windows系统按住shift，然后点击鼠标右键，会有一个在此处打开命令行窗口或者powershell，点击即可进入命令行）。</p><p>进入python后的显示界面如下：</p><p><img src="/2019/03/01/python学习笔记一/python01-02.png" alt="cmd"></p><p>如此显示，则代表成功启动python。</p><h4 id="python的数据类型"><a href="#python的数据类型" class="headerlink" title="python的数据类型"></a>python的数据类型</h4><p>python是一门弱数据类型语言，即它定义一个变量的时候，并不需要声明该变量的数据类型。在python中有六种基本的数据类型，分别是Number(数字),String(字符串),Tuple(元组),List(列表),Dictionary(字典),Set(集合)。其中前三种属于不可变数据，后三种属于可变数据。下面讲解六种基本数据类型。</p><h5 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h5><h6 id="int类型"><a href="#int类型" class="headerlink" title="int类型"></a>int类型</h6><p>int类型即整型，是数字5，10，这样没有小数点的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br></pre></td></tr></table></figure><h6 id="float类型"><a href="#float类型" class="headerlink" title="float类型"></a>float类型</h6><p>float类型即浮点型，是5.0，4.5这样有小数点的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">4.3</span></span><br><span class="line">&gt;&gt;&gt;type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">float</span>'&gt;</span></span><br></pre></td></tr></table></figure><h6 id="complex类型"><a href="#complex类型" class="headerlink" title="complex类型"></a>complex类型</h6><p>complex类型复数类型，是类似于4+5j这样的数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">5</span>+<span class="number">4j</span></span><br><span class="line">&gt;&gt;&gt;type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">complex</span>'&gt;</span></span><br></pre></td></tr></table></figure><h6 id="bool类型"><a href="#bool类型" class="headerlink" title="bool类型"></a>bool类型</h6><p>bool类型是布尔类型，该类型只有False和True两个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bool</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>布尔类型虽然表示逻辑，但是可以直接与数字进行计算。True 的值为1，False的值为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a, b= <span class="keyword">True</span>, <span class="number">1</span>      <span class="comment">#对a，b两个变量分别赋值，a为True，b为1</span></span><br><span class="line">&gt;&gt;&gt;a + b</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h5><p>string类型即字符串类型，python中的字符串被单引号’’或者双引号“”括起来，同时使用\转义特殊字符。两个字符串可以直接拼接，这样就产生了一个新的字符串。同时在python中，string类型可以方便的剪切，可以使用形如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```python</span><br><span class="line">&gt;&gt;&gt;w = &apos;赵襄&apos;#双引号与单引号并无区别</span><br><span class="line">&gt;&gt;&gt;w #也可以使用print(w)打印，直接s仅限于交互窗口</span><br><span class="line">&apos;赵襄&apos;</span><br><span class="line">&gt;&gt;&gt;z  = &apos;襄襄&apos;</span><br><span class="line">&gt;&gt;&gt;wz = w + z</span><br><span class="line">&gt;&gt;&gt;print(wz)</span><br><span class="line">&apos;赵襄襄襄&apos;</span><br><span class="line">&gt;&gt;&gt;wz[0:1]#所有的编程语言中，第一个字符都是由0开始算的。</span><br><span class="line">&apos;襄&apos;</span><br><span class="line">&gt;&gt;&gt;wz[0:-1]#-1表示从尾部数起</span><br><span class="line">&apos;赵襄襄&apos;</span><br><span class="line">&gt;&gt;&gt;wz[0]#如同wz[0:1]，如果没有尾下标，则将处于头下标的字符输出。</span><br><span class="line">&apos;襄&apos;</span><br><span class="line">&gt;&gt;&gt;wz*2#python中字符串可以使用乘法，表示将该字符串复制n遍</span><br><span class="line">&apos;赵襄襄襄赵襄襄襄&apos;</span><br><span class="line">&gt;&gt;&gt;wz[1:3]*2#也可以混合一起用，python是一门胶水语言</span><br><span class="line">&apos;襄襄襄襄&apos;</span><br><span class="line">&gt;&gt;&gt;print(wz+&apos;\n123&apos;)#\后跟字符会将字符转义，\n即是回车，必须加print，不然默认交互界面是不转义的</span><br><span class="line">赵襄襄襄</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h5 id="tuple类型"><a href="#tuple类型" class="headerlink" title="tuple类型"></a>tuple类型</h5><p>tuple类型即元组类型，tuple类型和list类型十分相似，唯一的区别是list里面的元素可以改变，而元组不能。同时元组，列表索引的方式，与string是一模一样的。元组的定义是用小括号()包围。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;tuple = ( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>  )</span><br><span class="line">&gt;&gt;&gt;tinytuple = (<span class="number">123</span>, <span class="string">'阿襄'</span>)</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tuple)             <span class="comment"># 输出完整元组</span></span><br><span class="line">(<span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tuple[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line">abcd</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tuple[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line">(<span class="number">786</span>, <span class="number">2.23</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tuple[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line">(<span class="number">2.23</span>, <span class="string">'阿襄'</span>， <span class="number">70.2</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line">(<span class="number">123</span>, <span class="string">'阿襄'</span>, <span class="number">123</span>, <span class="string">'阿襄'</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tuple + tinytuple) <span class="comment"># 连接元组</span></span><br><span class="line">( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span> , <span class="number">123</span>, <span class="string">'阿襄'</span>)</span><br><span class="line">&gt;&gt;&gt;tinytuple[<span class="number">1</span>] = <span class="string">'襄襄'</span><span class="comment">#修改元组的元素会报错，就算修改后和修改前一样也是如此</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><h5 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h5><p>list类型即列表类型，与tuple十分相似，不多赘述。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;list = [ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span> ]</span><br><span class="line">&gt;&gt;&gt;tinylist = [<span class="number">123</span>, <span class="string">'阿襄'</span>]</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (list)            <span class="comment"># 输出完整列表</span></span><br><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (list[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line">abcd</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (list[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line">[<span class="number">786</span> , <span class="number">2.23</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (list[<span class="number">2</span>:])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line">[<span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 输出两次列表</span></span><br><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>, <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> (list + tinylist) <span class="comment"># 连接列表</span></span><br><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'阿襄'</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">'阿襄'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;list[<span class="number">3</span>] = <span class="string">'襄襄'</span>  <span class="comment">#与tuple不同，list的元素值可以被改变</span></span><br><span class="line">&gt;&gt;&gt;print(list)</span><br><span class="line">[ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'襄襄'</span>, <span class="number">70.2</span> ]</span><br><span class="line">&gt;&gt;&gt;list[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">777</span>, <span class="number">223</span>, <span class="string">'赵襄'</span>]<span class="comment">#同时也可以使用索引批量更改</span></span><br><span class="line">[ <span class="string">'abcd'</span>, <span class="number">777</span>, <span class="number">223</span>, <span class="string">'赵襄'</span>, <span class="number">70.2</span> ]</span><br></pre></td></tr></table></figure><h5 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h5><p>set类型是集合类型，基本操作与tuple和list一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;student = &#123;<span class="string">'赵襄'</span>, <span class="string">'阿襄'</span>, <span class="string">'襄襄'</span>, <span class="string">'赵襄'</span>&#125; </span><br><span class="line">&gt;&gt;&gt;print(student)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line">&#123;<span class="string">'赵襄'</span>, <span class="string">'阿襄'</span>, <span class="string">'襄襄'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">&gt;&gt;&gt;a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">&gt;&gt;&gt;b = set(<span class="string">'alacazam'</span>)</span><br><span class="line">&gt;&gt;&gt;print(a)<span class="comment">#顺序可能不一样</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;print(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;print(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line">&#123;<span class="string">'l'</span>, <span class="string">'r'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'z'</span>, <span class="string">'m'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;print(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;print(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br><span class="line">&#123;<span class="string">'l'</span>, <span class="string">'r'</span>, <span class="string">'z'</span>, <span class="string">'m'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>&#125;</span><br></pre></td></tr></table></figure><font color="#FF0000">Tips:特别注意，如果创建一个空集合，不能使用<code>a={}</code>，而应当使用<code>a=set()</code>，前者默认是创建一个空的字典，而非一个空的集合。</font><h5 id="dictionary类型"><a href="#dictionary类型" class="headerlink" title="dictionary类型"></a>dictionary类型</h5><p>dictionary是字典类型，类似于平常的字典。主要存储的是键值对（key-value），主要通过key来获取value。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[<span class="string">'wz'</span>] = <span class="string">"赵襄"</span></span><br><span class="line">dict[<span class="number">2</span>]    = <span class="string">"阿襄"</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'赵襄'</span>,<span class="string">'age'</span>:<span class="number">16</span>, <span class="string">'like'</span>: <span class="string">'道'</span>&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (dict[<span class="string">'wz'</span>])       <span class="comment"># 输出键为 'wz' 的值</span></span><br><span class="line">赵襄</span><br><span class="line"><span class="keyword">print</span> (dict[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line">阿襄</span><br><span class="line"><span class="keyword">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'赵襄'</span>,<span class="string">'age'</span>: <span class="number">21</span>, <span class="string">'like'</span>: <span class="string">'诗'</span>&#125;</span><br><span class="line"><span class="keyword">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'like'</span>])</span><br><span class="line"><span class="keyword">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br><span class="line">dict_values([<span class="string">'赵襄'</span>, <span class="number">21</span>, <span class="string">'诗'</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;python&lt;/code&gt;，俗称蟒蛇。是由Guido van Rossum圣诞节无聊，打发时间鼓捣出的一种脚本语言（Linus休息的时候写出来git，成就了现在如日中天的GitHub，可见大佬们都是无敌的）。历经多年的发展，借着人工智能的浪潮，已经成为了世界上最
      
    
    </summary>
    
    
      <category term="Python" scheme="http://HolyCat123.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>poem</title>
    <link href="http://HolyCat123.github.io/2018/12/20/poem/"/>
    <id>http://HolyCat123.github.io/2018/12/20/poem/</id>
    <published>2018-12-20T10:44:05.000Z</published>
    <updated>2019-03-01T16:01:13.242Z</updated>
    
    <content type="html"><![CDATA[<p>打算创建一个关于诗歌的网站。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打算创建一个关于诗歌的网站。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="其它" scheme="http://HolyCat123.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
</feed>
